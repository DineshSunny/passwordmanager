import tkinter as tk
from tkinter import messagebox
import RPi.GPIO as GPIO
from mfrc522 import SimpleMFRC522
import pyotp
import smtplib
from email.message import EmailMessage
import time
import cv2
import face_recognition
import pickle
import sqlite3

# Email Configuration
EMAIL_ADDRESS = "your_email@gmail.com"
EMAIL_PASSWORD = "your_email_password"
RECIPIENT_EMAIL = "recipient_email@gmail.com"

# Database Connection
conn = sqlite3.connect("face_auth.db")
cursor = conn.cursor()

# RFID Setup
reader = SimpleMFRC522()

# OTP Generation
totp = pyotp.TOTP(pyotp.random_base32())

def send_email(otp):
    """Sends OTP via email."""
    msg = EmailMessage()
    msg['Subject'] = 'Your One-Time Password (OTP)'
    msg['From'] = EMAIL_ADDRESS
    msg['To'] = RECIPIENT_EMAIL
    msg.set_content(f'Your OTP is: {otp}\nThis OTP will expire in 5 minutes.')
    
    try:
        with smtplib.SMTP_SSL('smtp.gmail.com', 465) as server:
            server.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
            server.send_message(msg)
        print("OTP sent successfully.")
    except Exception as e:
        print(f"Failed to send email: {e}")

def rfid_authentication():
    """Authenticate using RFID keyfob."""
    try:
        id, text = reader.read()
        print(f"Keyfob detected! UID: {id}")
        otp = totp.now()
        send_email(otp)
        otp_screen()
    except Exception as e:
        messagebox.showerror("Error", "RFID Read Failed")

def verify_otp():
    """Verify OTP and proceed to facial recognition."""
    entered_otp = otp_entry.get()
    if totp.verify(entered_otp):
        messagebox.showinfo("Success", "OTP Verified! Proceeding to Face Recognition...")
        root.destroy()
        face_recognition_auth()
    else:
        messagebox.showerror("Error", "Invalid OTP")

def face_recognition_auth():
    """Perform facial recognition authentication."""
    cap = cv2.VideoCapture(0)
    known_encodings = {}

    # Load stored face encodings
    cursor.execute("SELECT name, face_encoding FROM users")
    for name, encoding_blob in cursor.fetchall():
        known_encodings[name] = pickle.loads(encoding_blob)
    
    print("Face authentication started. Look at the camera...")
    start_time = time.time()
    while True:
        ret, frame = cap.read()
        if not ret:
            continue
        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        face_encodings = face_recognition.face_encodings(rgb_frame)
        
        for encoding in face_encodings:
            for name, stored_encoding in known_encodings.items():
                if face_recognition.compare_faces([stored_encoding], encoding)[0]:
                    print(f"Authenticated: {name}")
                    cap.release()
                    cv2.destroyAllWindows()
                    return messagebox.showinfo("Success", "Login Successful")
        
        if time.time() - start_time > 10:  # 10 seconds timeout
            break
    
    cap.release()
    cv2.destroyAllWindows()
    messagebox.showerror("Error", "Face not recognized. Access Denied!")

def otp_screen():
    """Displays OTP entry screen."""
    global otp_entry
    otp_window = tk.Toplevel(root)
    otp_window.title("Enter OTP")
    tk.Label(otp_window, text="Enter the OTP sent to your email:").pack()
    otp_entry = tk.Entry(otp_window)
    otp_entry.pack()
    tk.Button(otp_window, text="Verify OTP", command=verify_otp).pack()

def main_screen():
    """Initial RFID login screen."""
    global root
    root = tk.Tk()
    root.title("RFID Login")
    
    tk.Label(root, text="Tap your RFID keyfob to login").pack()
    tk.Button(root, text="Tap Keyfob", command=rfid_authentication).pack()
    
    root.mainloop()

# Start the GUI
main_screen()
