from cryptography.fernet import Fernet
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
import base64

# Generate keys for each level of encryption
key1 = Fernet.generate_key()
key2 = Fernet.generate_key()
key3 = Fernet.generate_key()
key4 = Fernet.generate_key()

cipher1 = Fernet(key1)
cipher2 = Fernet(key2)
cipher3 = Fernet(key3)
cipher4 = Fernet(key4)

# Generate AES key
aes_key = AES.get_random_bytes(32)  # 256-bit key

def encrypt(password):
    print(f"Original password: {password}")

    # Level 1 encryption
    encrypted1 = cipher1.encrypt(password.encode())
    print(f"Level 1 encrypted: {encrypted1}")

    # Level 2 encryption
    encrypted2 = cipher2.encrypt(encrypted1)
    print(f"Level 2 encrypted: {encrypted2}")

    # Level 3 encryption
    encrypted3 = cipher3.encrypt(encrypted2)
    print(f"Level 3 encrypted: {encrypted3}")

    # Level 4 encryption
    encrypted4 = cipher4.encrypt(encrypted3)
    print(f"Level 4 encrypted: {encrypted4}")

    # AES-256 encryption
    cipher_aes = AES.new(aes_key, AES.MODE_CBC)
    ct_bytes = cipher_aes.encrypt(pad(encrypted4, AES.block_size))
    iv = base64.b64encode(cipher_aes.iv).decode('utf-8')
    ct = base64.b64encode(ct_bytes).decode('utf-8')
    aes_encrypted = f"{iv}:{ct}"
    print(f"AES-256 encrypted: {aes_encrypted}")

    return aes_encrypted

def decrypt(aes_encrypted):
    print(f"AES-256 encrypted: {aes_encrypted}")

    # AES-256 decryption
    iv, ct = aes_encrypted.split(':')
    iv = base64.b64decode(iv)
    ct = base64.b64decode(ct)
    cipher_aes = AES.new(aes_key, AES.MODE_CBC, iv)
    decrypted4 = unpad(cipher_aes.decrypt(ct), AES.block_size)
    print(f"Level 4 encrypted: {decrypted4}")

    # Level 4 decryption
    decrypted3 = cipher4.decrypt(decrypted4)
    print(f"Level 3 encrypted: {decrypted3}")

    # Level 3 decryption
    decrypted2 = cipher3.decrypt(decrypted3)
    print(f"Level 2 encrypted: {decrypted2}")

    # Level 2 decryption
    decrypted1 = cipher2.decrypt(decrypted2)
    print(f"Level 1 encrypted: {decrypted1}")

    # Level 1 decryption
    original_password = cipher1.decrypt(decrypted1).decode()
    print(f"Original password: {original_password}")

    return original_password

# Example usage
password = "my_secure_password"
encrypted_password = encrypt(password)
decrypted_password = decrypt(encrypted_password)
